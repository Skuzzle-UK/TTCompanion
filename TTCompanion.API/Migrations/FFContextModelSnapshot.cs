// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TTCompanion.API.FantasyFootball.DBContexts;

#nullable disable

namespace TTCompanion.API.Migrations
{
    [DbContext(typeof(FFContext))]
    partial class FFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("TTCompanion.API.FantasyFootball.Entities.FFPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AG")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AV")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MA")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ST")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AG = 3,
                            AV = 8,
                            Cost = 75000,
                            MA = 7,
                            Name = "Ghoul Runner",
                            PA = 4,
                            RaceId = 1,
                            ST = 3
                        },
                        new
                        {
                            Id = 2,
                            AG = 5,
                            AV = 10,
                            Cost = 125000,
                            MA = 3,
                            Name = "Mummy",
                            RaceId = 1,
                            ST = 5
                        });
                });

            modelBuilder.Entity("TTCompanion.API.FantasyFootball.Entities.FFRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ApothecaryAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CostOfApothercary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CostOfAssistantCoach")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CostOfBloodweiserKeg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CostOfBribes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CostOfCheerleader")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CostOfDedicatedFan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CostOfMasterChef")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CostOfReRolls")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAssistantCoachs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxBloodweiserKegs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxBribes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCheerleaders")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxDedicatedFans")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMasterChefs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxReRolls")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApothecaryAvailable = false,
                            CostOfAssistantCoach = 0,
                            CostOfBloodweiserKeg = 0,
                            CostOfBribes = 0,
                            CostOfCheerleader = 0,
                            CostOfDedicatedFan = 0,
                            CostOfMasterChef = 0,
                            CostOfReRolls = 70000,
                            MaxAssistantCoachs = 0,
                            MaxBloodweiserKegs = 0,
                            MaxBribes = 0,
                            MaxCheerleaders = 0,
                            MaxDedicatedFans = 0,
                            MaxMasterChefs = 0,
                            MaxReRolls = 0,
                            Name = "Shambling Undead"
                        },
                        new
                        {
                            Id = 2,
                            ApothecaryAvailable = false,
                            CostOfAssistantCoach = 0,
                            CostOfBloodweiserKeg = 0,
                            CostOfBribes = 0,
                            CostOfCheerleader = 0,
                            CostOfDedicatedFan = 0,
                            CostOfMasterChef = 0,
                            CostOfReRolls = 60000,
                            MaxAssistantCoachs = 0,
                            MaxBloodweiserKegs = 0,
                            MaxBribes = 0,
                            MaxCheerleaders = 0,
                            MaxDedicatedFans = 0,
                            MaxMasterChefs = 0,
                            MaxReRolls = 0,
                            Name = "Snotling"
                        });
                });

            modelBuilder.Entity("TTCompanion.API.FantasyFootball.Entities.FFSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FFPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FFPlayerId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("TTCompanion.API.FantasyFootball.Entities.FFSpecialRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FFRaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FFRaceId");

                    b.ToTable("SpecialRules");
                });

            modelBuilder.Entity("TTCompanion.API.FantasyFootball.Entities.FFPlayer", b =>
                {
                    b.HasOne("TTCompanion.API.FantasyFootball.Entities.FFRace", "Race")
                        .WithMany("Players")
                        .HasForeignKey("CityId");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("TTCompanion.API.FantasyFootball.Entities.FFSkill", b =>
                {
                    b.HasOne("TTCompanion.API.FantasyFootball.Entities.FFPlayer", null)
                        .WithMany("Skills")
                        .HasForeignKey("FFPlayerId");
                });

            modelBuilder.Entity("TTCompanion.API.FantasyFootball.Entities.FFSpecialRule", b =>
                {
                    b.HasOne("TTCompanion.API.FantasyFootball.Entities.FFRace", null)
                        .WithMany("SpecialRules")
                        .HasForeignKey("FFRaceId");
                });

            modelBuilder.Entity("TTCompanion.API.FantasyFootball.Entities.FFPlayer", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("TTCompanion.API.FantasyFootball.Entities.FFRace", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("SpecialRules");
                });
#pragma warning restore 612, 618
        }
    }
}
